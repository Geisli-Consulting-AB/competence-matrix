rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isGeisliUser() {
      return request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.token.email.matches('.*@geisli\\.se$');
    }

    function isOwner(userId) {
      return isGeisliUser() && request.auth.uid == userId;
    }

    function validCompetence(data) {
      // Required fields
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.level is int && data.level >= 1 && data.level <= 4 &&
             // Optional fields with type checks if present
             (!data.keys().hasAny(['ownerName']) || data.ownerName is string) &&
             (!data.keys().hasAny(['updatedAt']) || data.updatedAt is timestamp);
    }

    // Each user can access only their own documents under users/{uid}
    match /users/{userId} {
      // You may have other subcollections under users; default deny unless specified

      // Competences subcollection
      match /competences/{competenceId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) && validCompetence(request.resource.data);
        allow delete: if isOwner(userId);
      }

      // Allow any geisli.se user to read user documents (for team overview)
      // but only allow users to write to their own documents
      // Also allow reading seeded test data (userIds starting with "user_")
      allow read: if isGeisliUser() || userId.matches('^user_.*');
      allow write: if isOwner(userId);
    }

    // Shared categories collection - all geisli.se users can read and write
    match /sharedCategories/{categoryId} {
      allow read: if isGeisliUser();
      allow create, update: if isGeisliUser() && validCategory(request.resource.data);
      allow delete: if isGeisliUser();
    }

    function validCategory(data) {
      // Required fields for categories
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.color is string && data.color.size() > 0 &&
             data.competences is list &&
             // Optional fields with type checks if present
             (!data.keys().hasAny(['updatedAt']) || data.updatedAt is timestamp);
    }

    // Legacy categories collection - keep for backward compatibility but deprecated
    match /categories/{userId} {
      allow read: if isGeisliUser();
      allow write: if isOwner(userId);
    }

    // Deny everything else by default
  }
}
